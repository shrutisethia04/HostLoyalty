--11. Drop Foreign Key constraints

ALTER TABLE LOYALTY_TRANSACTION  DROP CONSTRAINT  FK_LOYTRANSACTION2LOYMEMBER ;     
ALTER TABLE LOYALTY_TRANSACTION  DROP CONSTRAINT FK_LOYALTYTRANS2LOYALTYTRANS;
ALTER TABLE LOYALTY_TIER_HIST  DROP CONSTRAINT  FK_LOYALTYTIERHIST2LOYMEMBER;
ALTER TABLE LOYALTY_TIER_CRITERIA  DROP CONSTRAINT FK_LOYTIERCRITERIA2LOYMEMBER;
ALTER TABLE LOYALTY_MEMBER_XREF DROP CONSTRAINT   FK_LOYMEMXREF2LOYALTYMEMBER;
ALTER TABLE LOYALTY_CREDIT_PENDING  DROP CONSTRAINT FK_LOYCREDITPENDING2LOYMEMBER;
ALTER TABLE LOYALTY_CC_STATUS_HIST  DROP CONSTRAINT FK_LOYCCSTATHIST2LOYMEMBER;
ALTER TABLE LOYALTY_AGGREGATOR   DROP CONSTRAINT  FK_LOYALTYMEM2LOYALTYAGGR;


--12. Truncate tables 
rollback ;
TRUNCATE TABLE "LOYALTY_AGGREGATOR";
TRUNCATE TABLE  "LOYALTY_CC_STATUS_HIST" ;
TRUNCATE TABLE  "LOYALTY_CREDIT_PENDING";
TRUNCATE TABLE "LOYALTY_MEMBER";
TRUNCATE TABLE "LOYALTY_MEMBER_XREF";
TRUNCATE TABLE "LOYALTY_TIER_CRITERIA";
TRUNCATE TABLE "LOYALTY_TIER_HIST";
TRUNCATE TABLE "LOYALTY_TRANSACTION";


---Create Fk
ALTER TABLE CUSTOMER.LOYALTY_AGGREGATOR
ADD CONSTRAINT FK_LOYALTYMEM2LOYALTYAGGR FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;
COMMENT ON TABLE CUSTOMER.LOYALTY_AGGREGATOR IS 'APP = LOYALTY AGGREGATOR
CMT = Every loyalty member who joined or linked to our orbitz loyalty program through an external merchant should have one entry for each such program.';


ALTER TABLE CUSTOMER.LOYALTY_CC_STATUS_HIST
ADD CONSTRAINT FK_LOYCCSTATHIST2LOYMEMBER FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;


ALTER TABLE CUSTOMER.LOYALTY_CREDIT_PENDING
ADD CONSTRAINT FK_LOYCREDITPENDING2LOYMEMBER FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;
COMMENT ON TABLE CUSTOMER.LOYALTY_CREDIT_PENDING IS 'SEC = PROP
USE = TRNS
BOW=MBR
TOW=CPE
CMT = This is a list of the booking that have been made by a member that will result in a earning whenever the effective date occurs.  Rows from this table will be moved from this table to LOYALTY_TRANSACTION';

ALTER TABLE CUSTOMER.LOYALTY_MEMBER_XREF
ADD CONSTRAINT FK_LOYMEMXREF2LOYALTYMEMBER FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;
COMMENT ON TABLE CUSTOMER.LOYALTY_MEMBER_XREF IS 'SEC = PROP
USE = TRNS
BOW=MBR
TOW=CPE
CMT = This is a cross-reference table between CUSTOMER_MEMBER and LOYALTY_MEMBER.  A CUSTOMER_MEMBER can only have one LOYALTY_MEMBER, but a LOYALTY_MEMBER can have multiple CUSTOMER_MEMBERs.  This is intended to allow sharing of CUSTOMER_MEMBER records by a LOYALTY_MEMBER.  Originally implemented to handle RTG and HC sharing LOYALTY earnings and be able to spend those earnings on either POS.';


---************ 
ALTER TABLE CUSTOMER.LOYALTY_TIER_HIST
ADD CONSTRAINT FK_LOYALTYTIERHIST2LOYMEMBER FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;
COMMENT ON TABLE CUSTOMER.LOYALTY_TIER_HIST IS 'SEC = PROP
USE = TRNS
BOW=MBR
TOW=CPE
CMT = History of tier a LOYALTY_MEMBER was on.';
------***************



ALTER TABLE CUSTOMER.LOYALTY_TRANSACTION
ADD CONSTRAINT FK_LOYALTYTRANS2LOYALTYTRANS FOREIGN KEY
(
  LOYALTY_TRANSACTION_PARENT_ID 
)
REFERENCES CUSTOMER.LOYALTY_TRANSACTION
(
  LOYALTY_TRANSACTION_ID 
)
ENABLE;


EXEC DBMS_OUTPUT.PUT_LINE('Creating index FK_LOYTRANSACTION2LOYMEMBER ON CUSTOMER.LOYALTY_TRANSACTION');

ALTER TABLE CUSTOMER.LOYALTY_TRANSACTION
ADD CONSTRAINT FK_LOYTRANSACTION2LOYMEMBER FOREIGN KEY
(
  LOYALTY_MEMBER_ID 
)
REFERENCES CUSTOMER.LOYALTY_MEMBER
(
  LOYALTY_MEMBER_ID 
)
ENABLE;
COMMENT ON TABLE CUSTOMER.LOYALTY_TRANSACTION IS 'SEC = PROP
USE = TRNS
BOW=MBR
TOW=CPE
CMT = This is a transactional table that holds all of the Loyalty earnings from various sources (Booking, Bonus).  It also holds the remaining amount of the amount awarded.';



